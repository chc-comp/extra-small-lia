(set-logic HORN)
(set-info :status sat)
(declare-fun inv (Int Int Int Int Int Int ) Bool)
(declare-fun inv1 (Int Int Int Int Int Int ) Bool)

(assert (forall ((i1 Int) (j1 Int) (z1 Int) (x1 Int) (y1 Int) (w1 Int))
  (=> (and (= i1 1) (= j1 0) (= z1 (- i1 j1)) (= x1 0) (= y1 0) (= w1 0))
      (inv i1 j1 z1 x1 y1 w1))))
(assert (forall ((i0 Int) (j0 Int) (z0 Int) (x0 Int) (y0 Int) (w0 Int))
  (=> (inv i0 j0 z0 x0 y0 w0) (inv1 i0 j0 z0 x0 y0 w0))))
(assert (forall ((z0 Int)
         (y0 Int)
         (x0 Int)
         (w0 Int)
         (i0 Int)
         (j0 Int)
         (z1 Int)
         (x1 Int)
         (y1 Int)
         (w1 Int))
  (let ((a!1 (= x1 (ite (= (mod z1 2) 1) (+ x0 1) x0))))
    (=> (and (inv1 i0 j0 z0 x0 y0 w0)
             (= z1 (+ z0 x0 y0 w0))
             (= y1 (+ y0 1))
             a!1
             (= w1 (+ w0 2)))
        (inv1 i0 j0 z1 x1 y1 w1)))))
(assert (forall ((i0 Int) (j0 Int) (z0 Int) (x0 Int) (y0 Int) (w0 Int))
  (=> (inv1 i0 j0 z0 x0 y0 w0) (inv i0 j0 z0 x0 y0 w0))))
(assert (forall ((i1 Int) (j1 Int) (z1 Int) (w1 Int) (x1 Int) (y1 Int))
  (=> (and (inv i1 j1 z1 x1 y1 w1) (not (= x1 y1))) false)))
(check-sat)
