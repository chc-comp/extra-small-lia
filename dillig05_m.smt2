(set-logic HORN)
(set-info :status sat)
(declare-fun inv (Int Int Int Int ) Bool)
(declare-fun itp (Int Int Int Int ) Bool)

(assert (forall ((x1 Int) (x3 Int) (x5 Int) (x7 Int))
  (=> (and (= x1 0) (= x3 0) (= x5 0) (= x7 0)) (inv x1 x3 x5 x7))))
(assert (forall ((x1 Int) (x3 Int) (x5 Int) (x7 Int))
  (=> (inv x1 x3 x5 x7) (itp x1 x3 x5 x7))))
(assert (forall ((x1 Int)
         (x3 Int)
         (x5 Int)
         (x7 Int)
         (tmp Int)
         (x2 Int)
         (x4 Int)
         (x6 Int)
         (x8 Int))
  (let ((a!1 (and (itp x1 x3 x5 x7)
                  (= x2 (+ x1 1))
                  (= x4 (+ x3 1))
                  (= x6 (+ x5 x2))
                  (= tmp (+ x7 x4))
                  (or (= x8 tmp) (= x8 (+ tmp 1))))))
    (=> a!1 (itp x2 x4 x6 x8)))))
(assert (forall ((x1 Int) (x3 Int) (x5 Int) (x7 Int))
  (=> (itp x1 x3 x5 x7) (inv x1 x3 x5 x7))))
(assert (forall ((x1 Int) (x3 Int) (x7 Int) (x5 Int))
  (let ((a!1 (and (inv x1 x3 x5 x7) (not (> x7 (- x5 1))))))
    (=> a!1 false))))
(check-sat)
