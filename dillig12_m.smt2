(set-logic HORN)
(set-info :status sat)
(declare-fun FUN (Int Int Int Int Int ) Bool)
(declare-fun SAD (Int Int ) Bool)

(assert (forall ((m Int) (n Int) (s Int) (t Int) (flag Int))
  (=> (and (= m 0) (= n 0) (= s 0) (= t 0)) (FUN m n s t flag))))
(assert (forall ((m Int)
         (n Int)
         (s Int)
         (t Int)
         (t1 Int)
         (m1 Int)
         (n1 Int)
         (s1 Int)
         (t2 Int)
         (flag Int))
  (let ((a!1 (and (FUN m n s t flag)
                  (= m1 (+ m 1))
                  (= n1 (+ n 1))
                  (= s1 (+ s m1))
                  (= t1 (+ t n1))
                  (= t2 (ite (= flag 1) (+ t1 m1) t1)))))
    (=> a!1 (FUN m1 n1 s1 t2 flag)))))
(assert (forall ((m Int) (n Int) (flag Int) (t Int) (s Int) (x Int) (y Int))
  (let ((a!1 (= x (ite (= flag 1) (+ t (* (- 2) s) 2) 1))))
    (=> (and (FUN m n s t flag) a!1 (= y 0)) (SAD x y)))))
(assert (forall ((y Int) (x Int) (y1 Int))
  (let ((a!1 (and (SAD x y) (<= y x) (or (= y1 (+ y 1)) (= y1 (+ y 2))))))
    (=> a!1 (SAD x y1)))))
(assert (forall ((x Int) (y Int)) (=> (and (SAD x y) (>= y x) (>= y 5)) false)))
(check-sat)
