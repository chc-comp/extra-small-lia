(set-logic HORN)
(set-info :status sat)
(declare-fun inv1 (Int Int ) Bool)
(declare-fun inv (Int Int Int Int Int ) Bool)

(assert (inv1 10 20))
(assert (forall ((c1 Int) (c2 Int) (c3 Int) (c4 Int))
  (=> (and (inv1 c1 c2) (= c3 (+ c1 c1)) (= c4 (+ c2 c2))) (inv1 c3 c4))))
(assert (forall ((c1 Int) (c2 Int) (k1 Int) (i1 Int) (n1 Int))
  (=> (and (inv1 c1 c2) (= k1 0) (= i1 0) (> n1 0) (< n1 10))
      (inv c1 c2 k1 i1 n1))))
(assert (forall ((i0 Int)
         (w0 Int)
         (w1 Int)
         (v1 Int)
         (k0 Int)
         (c1 Int)
         (c2 Int)
         (k1 Int)
         (i1 Int)
         (n0 Int))
  (let ((a!1 (and (inv c1 c2 k0 i0 n0)
                  (< i0 n0)
                  (= i1 (+ i0 1))
                  (= w1 (mod w0 2))
                  (= v1 (ite (= w1 0) 0 1))
                  (= k1 (ite (= v1 0) (+ k0 c1) (+ k0 c2))))))
    (=> a!1 (inv c1 c2 k1 i1 n0)))))
(assert (forall ((c1 Int) (c2 Int) (i1 Int) (k1 Int) (n1 Int))
  (=> (and (inv c1 c2 k1 i1 n1) (>= i1 n1) (not (> k1 n1))) false)))
(check-sat)
