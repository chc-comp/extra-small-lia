(set-logic HORN)
(set-info :status sat)
(declare-fun inv1 (Int Int Int Int ) Bool)
(declare-fun inv (Int Int Int Int ) Bool)

(assert (forall ((x1 Int) (y1 Int) (k1 Int) (t0 Int))
  (=> (and (= x1 0) (= y1 0) (= k1 0) (= t0 0)) (inv1 x1 y1 k1 t0))))
(assert (forall ((t0 Int) (x1 Int) (y1 Int) (k1 Int) (t1 Int))
  (=> (and (inv1 x1 y1 k1 t0) (= t1 (+ t0 14))) (inv1 x1 y1 k1 t1))))
(assert (forall ((t0 Int) (x1 Int) (y1 Int) (k1 Int) (t1 Int))
  (=> (and (inv1 x1 y1 k1 t0) (= t1 (+ t0 2))) (inv x1 y1 k1 t1))))
(assert (forall ((k0 Int) (x0 Int) (y0 Int) (x1 Int) (y1 Int) (k1 Int) (t0 Int))
  (let ((a!1 (= x1 (ite (= (mod k0 2) 0) (+ x0 1) x0))))
    (=> (and (inv x0 y0 k0 t0) (< y0 t0) a!1 (= y1 (+ y0 1)) (= k1 (+ x1 y1)))
        (inv x1 y1 k1 t0)))))
(assert (forall ((k1 Int) (y1 Int) (t0 Int) (x1 Int))
  (=> (and (inv x1 y1 k1 t0) (= y1 t0) (not (= t0 x1))) false)))
(check-sat)
