(set-logic HORN)
(set-info :status sat)
(declare-fun inv (Int Int Int Int ) Bool)
(declare-fun inv2 (Int Int Int Int ) Bool)
(declare-fun inv3 (Int Int Int Int ) Bool)
(declare-fun inv4 (Int Int Int Int ) Bool)
(declare-fun inv5 (Int Int Int Int ) Bool)

(assert (forall ((x1 Int) (y1 Int) (z1 Int) (LRG Int))
  (=> (and (= x1 0) (= z1 0) (= y1 LRG) (> LRG 0)) (inv x1 y1 z1 LRG))))
(assert (forall ((x0 Int) (z0 Int) (y0 Int) (x1 Int) (y1 Int) (z1 Int) (LRG Int))
  (let ((a!1 (and (inv x0 y0 z0 LRG)
                  (< x0 LRG)
                  (= x1 (+ x0 1))
                  (= z1 (+ z0 1))
                  (= y1 (ite (< z0 LRG) y0 (+ y0 1))))))
    (=> a!1 (inv x1 y1 z1 LRG)))))
(assert (forall ((x0 Int) (y0 Int) (z0 Int) (LRG Int))
  (=> (and (inv x0 y0 z0 LRG) (>= x0 LRG)) (inv2 x0 y0 z0 LRG))))
(assert (forall ((x0 Int) (z0 Int) (y0 Int) (x1 Int) (y1 Int) (z1 Int) (LRG Int))
  (let ((a!1 (= y1 (ite (< z0 (* 2 LRG)) y0 (+ y0 1)))))
    (=> (and (inv2 x0 y0 z0 LRG)
             (< x0 (* 2 LRG))
             (= x1 (+ x0 1))
             (= z1 (+ z0 1))
             a!1)
        (inv2 x1 y1 z1 LRG)))))
(assert (forall ((x1 Int) (x0 Int) (y0 Int) (z0 Int) (LRG Int))
  (=> (and (inv2 x0 y0 z0 LRG) (>= x1 (* 2 LRG))) (inv3 x0 y0 z0 LRG))))
(assert (forall ((x0 Int) (z0 Int) (y0 Int) (x1 Int) (y1 Int) (z1 Int) (LRG Int))
  (let ((a!1 (= y1 (ite (< z0 (* 3 LRG)) y0 (+ y0 1)))))
    (=> (and (inv3 x0 y0 z0 LRG)
             (< x0 (* 3 LRG))
             (= x1 (+ x0 1))
             (= z1 (+ z0 1))
             a!1)
        (inv3 x1 y1 z1 LRG)))))
(assert (forall ((x1 Int) (x0 Int) (y0 Int) (z0 Int) (LRG Int))
  (=> (and (inv3 x0 y0 z0 LRG) (>= x1 (* 3 LRG))) (inv4 x0 y0 z0 LRG))))
(assert (forall ((x0 Int) (z0 Int) (y0 Int) (x1 Int) (y1 Int) (z1 Int) (LRG Int))
  (let ((a!1 (= y1 (ite (< z0 (* 4 LRG)) y0 (+ y0 1)))))
    (=> (and (inv4 x0 y0 z0 LRG)
             (< x0 (* 4 LRG))
             (= x1 (+ x0 1))
             (= z1 (+ z0 1))
             a!1)
        (inv4 x1 y1 z1 LRG)))))
(assert (forall ((x1 Int) (x0 Int) (y0 Int) (z0 Int) (LRG Int))
  (=> (and (inv4 x0 y0 z0 LRG) (>= x1 (* 4 LRG))) (inv5 x0 y0 z0 LRG))))
(assert (forall ((x0 Int) (z0 Int) (y0 Int) (x1 Int) (y1 Int) (z1 Int) (LRG Int))
  (let ((a!1 (= y1 (ite (< z0 (* 5 LRG)) y0 (+ y0 1)))))
    (=> (and (inv5 x0 y0 z0 LRG)
             (< x0 (* 5 LRG))
             (= x1 (+ x0 1))
             (= z1 (+ z0 1))
             a!1)
        (inv5 x1 y1 z1 LRG)))))
(assert (forall ((z1 Int) (x1 Int) (y1 Int) (LRG Int))
  (=> (and (inv5 x1 y1 z1 LRG) (>= x1 (* 5 LRG)) (not (= y1 LRG))) false)))
(check-sat)
