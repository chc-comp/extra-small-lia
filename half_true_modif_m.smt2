(set-logic HORN)
(set-info :status sat)
(declare-fun inv1 (Int Int Int Int ) Bool)
(declare-fun inv (Int Int Int Int ) Bool)

(assert (forall ((i Int) (k Int) (n Int) (j Int))
  (=> (and (= i 0) (= j 0) (= n 0) (>= k 0)) (inv1 i k n j))))
(assert (forall ((k Int) (i Int) (k1 Int) (n Int) (j Int))
  (=> (and (inv1 i k n j) (= k1 (+ k 1))) (inv1 i k1 n j))))
(assert (forall ((k Int) (i Int) (k1 Int) (n Int) (j Int))
  (=> (and (inv1 i k n j) (= k1 (+ k 52))) (inv i k1 n j))))
(assert (forall ((n Int) (i Int) (j Int) (i1 Int) (k Int) (n1 Int) (j1 Int))
  (let ((a!1 (and (inv i k n j)
                  (< i (* 2 k))
                  (= n1 (ite (= j 0) (+ n 1) n))
                  (= i1 (+ i 1))
                  (= j1 (ite (= j 0) 1 0)))))
    (=> a!1 (inv i1 k n1 j1)))))
(assert (forall ((j Int) (i Int) (n Int) (k Int))
  (=> (and (inv i k n j) (>= i (* 2 k)) (not (= n k))) false)))
(check-sat)
