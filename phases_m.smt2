(set-logic HORN)
(set-info :status sat)
(declare-fun inv1 (Int Int Int ) Bool)
(declare-fun inv2 (Int Int Int ) Bool)

(assert (forall ((tmp1 Int) (tmp2 Int) (x0 Int) (LRG1 Int) (LRG2 Int))
  (let ((a!1 (and (= x0 0)
                  (< 0 LRG1)
                  (< LRG1 LRG2)
                  (= LRG1 (* 2 tmp1))
                  (= LRG2 (+ (* 2 tmp2) 1)))))
    (=> a!1 (inv1 x0 LRG1 LRG2)))))
(assert (forall ((x0 Int) (x1 Int) (LRG1 Int) (LRG2 Int))
  (let ((a!1 (and (inv1 x0 LRG1 LRG2)
                  (< x0 LRG1)
                  (= x1 (ite (< x0 LRG1) (+ x0 1) (+ x0 2))))))
    (=> a!1 (inv1 x1 LRG1 LRG2)))))
(assert (forall ((x0 Int) (LRG1 Int) (LRG2 Int))
  (=> (and (inv1 x0 LRG1 LRG2) (not (< x0 LRG1))) (inv2 x0 LRG1 LRG2))))
(assert (forall ((x0 Int) (x1 Int) (LRG1 Int) (LRG2 Int))
  (let ((a!1 (and (inv2 x0 LRG1 LRG2)
                  (< x0 LRG2)
                  (= x1 (ite (< x0 LRG1) (+ x0 1) (+ x0 2))))))
    (=> a!1 (inv2 x1 LRG1 LRG2)))))
(assert (forall ((LRG1 Int) (LRG2 Int) (x0 Int))
  (let ((a!1 (and (inv2 x0 LRG1 LRG2) (>= x0 LRG2) (not (= (mod x0 2) 0)))))
    (=> a!1 false))))
(check-sat)
