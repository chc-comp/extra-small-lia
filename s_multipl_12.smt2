(set-logic HORN)
(set-info :status sat)
(declare-fun INV0 (Int Int Int ) Bool)
(declare-fun INV1 (Int Int Int ) Bool)
(declare-fun INV2 (Int Int Int ) Bool)

(assert (forall ((x Int)) (=> (> x 0) (INV0 x 0 0))))
(assert (forall ((x Int) (x1 Int) (y Int) (z Int))
  (=> (and (INV0 x y z) (> x 0) (= x1 (- x 1))) (INV1 x1 y z))))
(assert (forall ((y Int) (z Int) (x Int) (y1 Int) (z1 Int))
  (=> (and (INV1 x y z) (< y x) (= y1 (+ y 1)) (= z1 (- z 1))) (INV1 x y1 z1))))
(assert (forall ((x Int) (y Int) (z Int))
  (=> (and (INV1 x y z) (not (< y x))) (INV2 x y z))))
(assert (forall ((y Int) (z Int) (x Int) (y1 Int) (z1 Int))
  (=> (and (INV2 x y z) (< z x) (= y1 (- y 1)) (= z1 (+ z 1))) (INV2 x y1 z1))))
(assert (forall ((x Int) (y Int) (z Int))
  (=> (and (INV2 x y z) (not (< z x))) (INV0 x y z))))
(assert (forall ((x Int) (y Int) (z Int))
  (=> (and (INV0 x y z) (= x 0) (not (= y z))) false)))
(check-sat)
