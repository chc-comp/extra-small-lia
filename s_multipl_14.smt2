(set-logic HORN)
(set-info :status sat)
(declare-fun PRE (Int Int Int Int Int ) Bool)
(declare-fun POST1 (Int Int Int Int ) Bool)
(declare-fun POST2 (Int Int Int Int ) Bool)
(declare-fun POST3 (Int Int Int Int ) Bool)

(assert (forall ((n Int)) (=> (>= n 0) (PRE n n 0 0 0))))
(assert (forall ((n Int)
         (i Int)
         (j Int)
         (k Int)
         (n1 Int)
         (m Int)
         (i1 Int)
         (j1 Int)
         (k1 Int))
  (let ((a!1 (or (and (= i1 (+ i 1)) (= j1 j) (= k1 k))
                 (and (= i1 i) (= j1 (+ j 1)) (= k1 k))
                 (and (= i1 i) (= j1 j) (= k1 (+ k 1))))))
    (=> (and (PRE n m i j k) (not (= n 0)) (= n1 (- n 1)) a!1)
        (PRE n1 m i1 j1 k1)))))
(assert (forall ((n Int) (m Int) (i Int) (j Int) (k Int))
  (=> (and (PRE n m i j k) (= n 0)) (POST1 m i j k))))
(assert (forall ((i Int) (m Int) (m1 Int) (i1 Int) (j Int) (k Int))
  (=> (and (POST1 m i j k) (not (= i 0)) (= i1 (- i 1)) (= m1 (- m 1)))
      (POST1 m1 i1 j k))))
(assert (forall ((m Int) (i Int) (j Int) (k Int))
  (=> (and (POST1 m i j k) (= i 0)) (POST2 m i j k))))
(assert (forall ((j Int) (m Int) (m1 Int) (i Int) (j1 Int) (k Int))
  (=> (and (POST2 m i j k) (not (= j 0)) (= j1 (- j 1)) (= m1 (- m 1)))
      (POST2 m1 i j1 k))))
(assert (forall ((m Int) (i Int) (j Int) (k Int))
  (=> (and (POST2 m i j k) (= j 0)) (POST3 m i j k))))
(assert (forall ((k Int) (m Int) (m1 Int) (i Int) (j Int) (k1 Int))
  (=> (and (POST3 m i j k) (not (= k 0)) (= k1 (- j 1)) (= m1 (- m 1)))
      (POST3 m1 i j k1))))
(assert (forall ((i Int) (j Int) (k Int) (m Int))
  (=> (and (POST3 m i j k) (= k 0) (not (= m 0))) false)))
(check-sat)
