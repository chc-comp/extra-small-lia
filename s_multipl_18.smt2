(set-logic HORN)
(set-info :status sat)
(declare-fun PRE (Int Int Int ) Bool)
(declare-fun POST (Int Int Int ) Bool)

(assert (forall ((z Int)) (PRE 0 0 z)))
(assert (forall ((j Int) (i Int) (i1 Int) (j1 Int) (z Int))
  (let ((a!1 (or (and (< j 0) (= j1 (- j z)) (= i1 (+ i z)))
                 (and (>= j 0) (= j1 (+ j z)) (= i1 (- i z))))))
    (=> (and (PRE i j z) a!1) (PRE i1 j1 z)))))
(assert (forall ((z Int) (i Int) (j Int) (z1 Int))
  (=> (and (PRE i j z) (< i j) (= z1 (- z))) (POST i j z1))))
(assert (forall ((i Int) (j Int) (i1 Int) (j1 Int) (z Int))
  (let ((a!1 (or (and (< j 0) (= j1 (+ i z)) (= i1 (- j z)))
                 (and (>= j 0) (= j1 (- i z)) (= i1 (+ j z))))))
    (=> (and (POST i j z) (not (= i j)) a!1) (POST i1 j1 z)))))
(assert (forall ((z Int) (j Int) (i Int))
  (=> (and (POST i j z) (= i j) (not (= i 0))) false)))
(check-sat)
