(set-logic HORN)
(set-info :status sat)
(declare-fun FUN (Int Int Int Int ) Bool)
(declare-fun SAD (Int Int Int Int ) Bool)

(assert (forall ((N1 Int) (k Int) (j Int) (N Int))
  (let ((a!1 (and (= k 0) (= j 0) (> N 0) (= N (+ (* 2 N1) 1)))))
    (=> a!1 (FUN k j 0 N)))))
(assert (forall ((k Int) (f Int) (j Int) (k1 Int) (j1 Int) (f1 Int) (N Int))
  (let ((a!1 (and (FUN k j f N)
                  (< k N)
                  (= k1 (+ k 1))
                  (= f1 (ite (= f 0) 1 0))
                  (= j1 (ite (= f 0) (+ j 1) j)))))
    (=> a!1 (FUN k1 j1 f1 N)))))
(assert (forall ((k Int) (f Int) (j Int) (k1 Int) (j1 Int) (N Int))
  (=> (and (FUN k j f N) (>= j N) (= k1 0) (= j1 j)) (SAD k1 j1 0 N))))
(assert (forall ((k Int) (f Int) (j Int) (k1 Int) (j1 Int) (f1 Int) (N Int))
  (let ((a!1 (and (SAD k j f N)
                  (< k N)
                  (= k1 (+ k 1))
                  (= f1 (ite (= f 0) 1 0))
                  (= j1 (ite (= f 1) (+ j 1) j)))))
    (=> a!1 (SAD k1 j1 f1 N)))))
(assert (forall ((f Int) (k Int) (N Int) (j Int))
  (=> (and (SAD k j f N) (>= k N) (not (= N j))) false)))
(check-sat)
