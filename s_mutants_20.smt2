(set-logic HORN)
(set-info :status sat)
(declare-fun inv (Int Int Int Int Int ) Bool)

(assert (forall ((k1 Int) (i1 Int) (j1 Int) (n1 Int) (b1 Int))
  (=> (and (= k1 100) (= i1 j1) (= n1 0) (= i1 0) (or (= b1 0) (= b1 1)))
      (inv k1 i1 j1 n1 b1))))
(assert (forall ((i0 Int)
         (j0 Int)
         (b0 Int)
         (n0 Int)
         (k0 Int)
         (i1 Int)
         (j1 Int)
         (n1 Int)
         (b1 Int))
  (let ((a!1 (and (inv k0 i0 j0 n0 b0)
                  (< n0 (* 2 k0))
                  (= i1 (ite (= b0 0) (+ i0 1) i0))
                  (= j1 (ite (= b0 0) j0 (+ j0 1)))
                  (= b1 (ite (= b0 0) 1 0))
                  (= n1 (+ n0 1)))))
    (=> a!1 (inv k0 i1 j1 n1 b1)))))
(assert (forall ((b1 Int) (k1 Int) (i1 Int) (j1 Int) (n1 Int))
  (let ((a!1 (and (inv k1 i1 j1 n1 b1) (>= n1 (* 2 k1)) (not (= (+ i1 j1) n1)))))
    (=> a!1 false))))
(check-sat)

